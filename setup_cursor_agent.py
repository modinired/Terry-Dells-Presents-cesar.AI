#!/usr/bin/env python3
"""
Cursor.ai Agent Setup Script for Terry Delmonaco Automation Agent
Version: 3.2
Description: Setup and configuration script for Cursor.ai agent integration
"""

import os
import json
import asyncio
from pathlib import Path
from typing import Dict, Any
import subprocess
import sys


class CursorAgentSetup:
    """Setup and configuration for Cursor.ai agent integration."""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.config_file = self.project_root / "cursor_config.json"
        self.env_file = self.project_root / ".env"
        
    def run_setup(self):
        """Run the complete Cursor.ai agent setup."""
        print("üöÄ Setting up Cursor.ai Agent for Terry Delmonaco System")
        print("=" * 60)
        
        try:
            # Step 1: Check prerequisites
            self._check_prerequisites()
            
            # Step 2: Load configuration
            config = self._load_configuration()
            
            # Step 3: Setup environment variables
            self._setup_environment_variables(config)
            
            # Step 4: Install dependencies
            self._install_dependencies()
            
            # Step 5: Test configuration
            self._test_configuration()
            
            # Step 6: Start the agent
            self._start_cursor_agent()
            
            print("\n‚úÖ Cursor.ai Agent setup completed successfully!")
            print("\nüìã Next steps:")
            print("1. Configure your Cursor.ai API key in .env file")
            print("2. Set up webhook URL for Cursor.ai integration")
            print("3. Test the integration with a sample task")
            print("4. Monitor the agent logs for any issues")
            
        except Exception as e:
            print(f"‚ùå Setup failed: {e}")
            sys.exit(1)
    
    def _check_prerequisites(self):
        """Check if all prerequisites are met."""
        print("\nüîç Checking prerequisites...")
        
        # Check Python version
        if sys.version_info < (3, 8):
            raise RuntimeError("Python 3.8+ is required")
        print("‚úÖ Python version: OK")
        
        # Check if project structure exists
        required_files = [
            "main_orchestrator.py",
            "app.py",
            "requirements.txt",
            "agents/cursor_agent.py"
        ]
        
        for file_path in required_files:
            if not (self.project_root / file_path).exists():
                raise RuntimeError(f"Required file not found: {file_path}")
        print("‚úÖ Project structure: OK")
        
        # Check if virtual environment exists
        if not (self.project_root / ".venv").exists():
            print("‚ö†Ô∏è  Virtual environment not found. Creating one...")
            self._create_virtual_environment()
        
        print("‚úÖ Prerequisites check completed")
    
    def _create_virtual_environment(self):
        """Create a virtual environment if it doesn't exist."""
        try:
            subprocess.run([sys.executable, "-m", "venv", ".venv"], 
                         cwd=self.project_root, check=True)
            print("‚úÖ Virtual environment created")
        except subprocess.CalledProcessError as e:
            raise RuntimeError(f"Failed to create virtual environment: {e}")
    
    def _load_configuration(self) -> Dict[str, Any]:
        """Load Cursor.ai configuration."""
        print("\nüìã Loading configuration...")
        
        if not self.config_file.exists():
            raise RuntimeError("Cursor configuration file not found")
        
        try:
            with open(self.config_file, 'r') as f:
                config = json.load(f)
            print("‚úÖ Configuration loaded")
            return config
        except Exception as e:
            raise RuntimeError(f"Failed to load configuration: {e}")
    
    def _setup_environment_variables(self, config: Dict[str, Any]):
        """Setup environment variables for Cursor.ai agent."""
        print("\nüîß Setting up environment variables...")
        
        env_vars = config.get("environment_variables", {})
        
        # Create or update .env file
        env_content = []
        env_content.append("# Cursor.ai Agent Environment Variables")
        env_content.append("# Generated by setup script")
        env_content.append("")
        
        for key, value in env_vars.items():
            env_content.append(f"{key}={value}")
        
        env_content.append("")
        env_content.append("# Additional system variables")
        env_content.append("AGENT_NAME=Terry Delmonaco Cursor Agent")
        env_content.append("AGENT_VERSION=3.2")
        env_content.append("TIMEZONE=UTC")
        env_content.append("LOG_LEVEL=INFO")
        
        # Write to .env file
        with open(self.env_file, 'w') as f:
            f.write('\n'.join(env_content))
        
        print("‚úÖ Environment variables configured")
        print(f"üìù Configuration written to: {self.env_file}")
    
    def _install_dependencies(self):
        """Install required dependencies."""
        print("\nüì¶ Installing dependencies...")
        
        try:
            # Activate virtual environment and install requirements
            if os.name == 'nt':  # Windows
                pip_cmd = [".venv/Scripts/pip", "install", "-r", "requirements_cursor_minimal.txt"]
            else:  # Unix/Linux/Mac
                pip_cmd = [".venv/bin/pip", "install", "-r", "requirements_cursor_minimal.txt"]
            
            subprocess.run(pip_cmd, cwd=self.project_root, check=True)
            print("‚úÖ Dependencies installed")
            
        except subprocess.CalledProcessError as e:
            raise RuntimeError(f"Failed to install dependencies: {e}")
    
    def _test_configuration(self):
        """Test the Cursor.ai agent configuration."""
        print("\nüß™ Testing configuration...")
        
        try:
            # Test import of cursor agent
            sys.path.insert(0, str(self.project_root))
            from agents.cursor_agent import CursorAgent
            
            # Create test instance
            agent = CursorAgent()
            print("‚úÖ Cursor agent import: OK")
            
            # Test configuration loading
            if agent.cursor_api_key is None:
                print("‚ö†Ô∏è  Cursor API key not configured (expected for testing)")
            else:
                print("‚úÖ Cursor API key: OK")
            
            print("‚úÖ Configuration test completed")
            
        except ImportError as e:
            raise RuntimeError(f"Failed to import Cursor agent: {e}")
        except Exception as e:
            raise RuntimeError(f"Configuration test failed: {e}")
    
    def _start_cursor_agent(self):
        """Start the Cursor.ai agent for testing."""
        print("\nüöÄ Starting Cursor.ai agent...")
        
        try:
            # Test the agent startup
            subprocess.run([
                sys.executable, "test_cursor_agent.py"
            ], cwd=self.project_root, check=True, timeout=30)
            
            print("‚úÖ Cursor agent startup test completed")
            
        except subprocess.TimeoutExpired:
            print("‚ö†Ô∏è  Agent startup test timed out (this is normal)")
        except subprocess.CalledProcessError as e:
            print(f"‚ö†Ô∏è  Agent startup test failed: {e}")
        except FileNotFoundError:
            print("‚ö†Ô∏è  Test script not found, skipping startup test")
    
    def create_test_script(self):
        """Create a test script for the Cursor.ai agent."""
        test_script = self.project_root / "test_cursor_agent.py"
        
        script_content = '''#!/usr/bin/env python3
"""
Test script for Cursor.ai agent integration.
"""

import asyncio
import sys
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from agents.cursor_agent import CursorAgent


async def test_cursor_agent():
    """Test the Cursor.ai agent functionality."""
    print("üß™ Testing Cursor.ai agent...")
    
    try:
        # Create agent instance
        agent = CursorAgent()
        
        # Test initialization
        success = await agent.initialize()
        if success:
            print("‚úÖ Agent initialization: OK")
        else:
            print("‚ùå Agent initialization: Failed")
            return
        
        # Test status
        status = await agent.get_status()
        print(f"‚úÖ Agent status: {status.get('status', 'unknown')}")
        
        # Test task processing
        test_task = {
            "id": "test-001",
            "type": "code_review",
            "content": "def test_function():\\n    pass",
            "priority": "medium"
        }
        
        result = await agent.process_task(test_task)
        print(f"‚úÖ Task processing: {result.get('status', 'unknown')}")
        
        # Shutdown
        await agent.shutdown()
        print("‚úÖ Agent shutdown: OK")
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")


if __name__ == "__main__":
    asyncio.run(test_cursor_agent())
'''
        
        with open(test_script, 'w') as f:
            f.write(script_content)
        
        # Make executable
        test_script.chmod(0o755)
        print(f"‚úÖ Test script created: {test_script}")


def main():
    """Main entry point for setup."""
    setup = CursorAgentSetup()
    
    # Create test script
    setup.create_test_script()
    
    # Run setup
    setup.run_setup()


if __name__ == "__main__":
    main() 